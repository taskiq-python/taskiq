[tool.poetry]
name = "taskiq"
version = "0.10.0"
description = "Distributed task queue with full async support"
authors = ["Pavel Kirilin <win10@list.ru>"]
maintainers = ["Pavel Kirilin <win10@list.ru>"]
readme = "README.md"
repository = "https://github.com/taskiq-python/taskiq"
homepage = "https://taskiq-python.github.io/"
documentation = "https://taskiq-python.github.io/"
license = "LICENSE"
classifiers = [
    "Typing :: Typed",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: System :: Networking",
    "Development Status :: 3 - Alpha",
]
keywords = ["taskiq", "tasks", "distributed", "async"]

[tool.poetry.dependencies]
python = "^3.8.1"
typing-extensions = ">=3.10.0.0"
pydantic = ">=1.0,<=3.0"
importlib-metadata = "*"
pycron = "^3.0.0"
taskiq_dependencies = "^1"
anyio = ">=3"
packaging = ">=19"
# For prometheus metrics
prometheus_client = { version = "^0", optional = true }
# For ZMQBroker
pyzmq = { version = "^23.2.0", optional = true, markers = "python_version < '3.12'"}
# For speed
uvloop = { version = ">=0.16.0,<1", optional = true, markers = "sys_platform != 'win32'" }
# For hot-reload.
watchdog = { version = "^2.1.9", optional = true }
gitignore-parser = { version = "^0", optional = true }
pytz = "*"
orjson = { version = "^3.9.9", optional = true }
msgpack = { version = "^1.0.7", optional = true }
cbor2 = { version = "^5.4.6", optional = true }

[tool.poetry.dev-dependencies]
pytest = "^7.1.2"
ruff = "^0.0.291"
black = { version = "^22.6.0", allow-prereleases = true }
mypy = "^1"
pre-commit = "^2.20.0"
coverage = "^6.4.2"
pytest-cov = "^3.0.0"
mock = "^4.0.3"
pytest-xdist = { version = "^2.5.0", extras = ["psutil"] }
types-mock = "^4.0.15"
tox = "^4.6.4"
freezegun = "^1.2.2"
pytest-mock = "^3.11.1"
tzlocal = "^5.0.1"
types-tzlocal = "^5.0.1.1"
types-pytz = "^2023.3.1.1"

[tool.poetry.extras]
zmq = ["pyzmq"]
uv = ["uvloop"]
metrics = ["prometheus_client"]
reload = ["watchdog", "gitignore-parser"]
orjson = ["orjson"]
msgpack = ["msgpack"]
cbor = ["cbor2"]

[tool.poetry.scripts]
taskiq = "taskiq.__main__:main"

[tool.poetry.plugins.taskiq_cli]
worker = "taskiq.cli.worker.cmd:WorkerCMD"
scheduler = "taskiq.cli.scheduler.cmd:SchedulerCMD"

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = false
warn_unused_ignores = false

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pytest.ini_options]
log_level = 'INFO'

[tool.coverage.run]
omit = [
    "taskiq/__main__.py",
    "taskiq/abc/cmd.py",
    "taskiq/cli/scheduler/args.py",
    "taskiq/cli/scheduler/cmd.py",
    "taskiq/cli/utils.py",
    "taskiq/cli/worker/args.py",
    "taskiq/cli/worker/async_task_runner.py",
    "taskiq/cli/worker/cmd.py",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
]
exclude = [".venv/"]
mccabe = { max-complexity = 10 }
line-length = 88

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",   # Use of assert detected
    "S301",   # Use of pickle detected
    "D103",   # Missing docstring in public function
    "SLF001", # Private member accessed
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "D101",   # Missing docstring in public class
]

[tool.ruff.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.pylint]
allow-magic-value-types = ["int", "str", "float", "tuple"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["taskiq_dependencies.Depends", "taskiq.TaskiqDepends"]
